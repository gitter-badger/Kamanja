/*
* Copyright 2016 ligaDATA
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.ligadata.jtm.test.grok
import com.ligadata.KamanjaBase._
import com.ligadata.KvBase.TimeRange
import com.ligadata.kamanja.metadata.ModelDef
import com.ligadata.Utils._
import org.aicer.grok.dictionary.GrokDictionary
class Factory(modelDef: ModelDef, nodeContext: NodeContext) extends ModelInstanceFactory(modelDef, nodeContext) {
  override def isValidMessage(msg: MessageContainerBase): Boolean = {
    msg.isInstanceOf[com.ligadata.kamanja.test.v1000000.msg5]
  }
  override def createModelInstance(): ModelInstance = return new Model(this)
  override def getModelName: String = "com.ligadata.jtm.test.grok"
  override def getVersion: String = "0.0.1"
  override def createResultObject(): ModelResultBase = new MappedModelResults()
}
class Model(factory: ModelInstanceFactory) extends ModelInstance(factory) {
  override def execute(txnCtxt: TransactionContext, outputDefault: Boolean): ModelResultBase = {
    //
    lazy val grok_instance_1: GrokDictionary = {
      val dict = new GrokDictionary
      dict.addBuiltInDictionaries
      dict.addDictionary(new File(getClass.getResource("grok/00346425/path").getPath))
      dict.bind()
      dict
    }
    lazy val grok_instance_1_0 = grok_instance_1.compileExpression("%{EMAIL:email} %{DOMAIN:domain} %{USER:user}")
    //
    def exeGenerated_test1_1(msg1: com.ligadata.kamanja.test.v1000000.msg5): Array[Result] = {
      lazy val grok_instance_1_0_in1 = grok_instance_1_0.extractNamedGroups(in1)
      def process_o1(): Array[Result] = {
        Array[Result](new Result("out1", in3), new Result("rowNumber", msg1.rowNumber), new Result("transactionId", msg1.transactionId), new Result("out4", user), new Result("out3", domain), new Result("timePartitionData", msg1.timePartitionData), new Result("out2", email))
      }
      process_o1()
    }
    //
    // ToDo: we expect an array of messages
    //
    val msgs = Array(txnCtxt.getMessage()).map(m => m.FullName -> m).toMap
    // Evaluate messages
    //
    val msg1 = msgs.get("com.ligadata.kamanja.test.msg5").getOrElse(null).asInstanceOf[com.ligadata.kamanja.test.v1000000.msg5]
    // Main dependency -> execution check
    //
    val results: Array[Result] =
    if(msg1!=null) {
      exeGenerated_test1_1(msg1)
    } else {
      Array.empty[Result]
    }
    factory.createResultObject().asInstanceOf[MappedModelResults].withResults(results)
  }
}
