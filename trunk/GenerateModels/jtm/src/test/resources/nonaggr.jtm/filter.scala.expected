
/*
 * Copyright 2016 ligaDATA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.ligadata.jtm.test.filter

import com.ligadata.KamanjaBase._
import com.ligadata.KvBase.TimeRange
import com.ligadata.kamanja.metadata.ModelDef;

import com.ligadata.kamanja.samples.messages.{msg1 ⇒ input0}
import com.ligadata.kamanja.samples.messages.{msg1 ⇒ output0}

class Factory(modelDef: ModelDef, nodeContext: NodeContext) extends ModelInstanceFactory(modelDef, nodeContext) {
  // if more than 1 input we have to find the correct instance
  override def isValidMessage(msg: MessageContainerBase): Boolean = return msg.isInstanceOf[input0]
  override def createModelInstance(): ModelInstance = return new Model(this)

  // Provided in json
  override def getModelName: String = "filter"
  override def getVersion: String = "0.0.1"

  override def createResultObject(): ModelResultBase = new MappedModelResults()
}


class Model(factory: ModelInstanceFactory) extends ModelInstance(factory) {

   override def execute(txnCtxt: TransactionContext, outputDefault: Boolean): ModelResultBase = {

    var input0: input0 = txnCtxt.getMessage().asInstanceOf[input0]


    {
      using input0
      if(!(score != -1 && score < 100))
        return null;
    }
    var result: Array[Result] = Array[Result](new Result("id", input0.id), new Result("name", input0.name), new Result("score", input0.score), new Result("transactionid", input0.transactionid))
    factory.createResultObject().asInstanceOf[MappedModelResults].withResults(result)


   }


}
