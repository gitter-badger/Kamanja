/*
* Copyright 2016 ligaDATA
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.ligadata.jtm.test.filter
import com.ligadata.KamanjaBase._
import com.ligadata.KvBase.TimeRange
import com.ligadata.kamanja.metadata.ModelDef
import com.ligadata.Utils._
import com.ligadata.runtime.Conversion
class ModelFactory(modelDef: ModelDef, nodeContext: NodeContext) extends ModelInstanceFactory(modelDef, nodeContext) {
  override def isValidMessage(msg: ContainerInterface): Boolean = {
    msg.isInstanceOf[com.ligadata.kamanja.test.v1000000.varin1]
  }
  override def createModelInstance(): ModelInstance = return new Model(this)
  override def getModelName: String = "com.ligadata.jtm.test.filter"
  override def getVersion: String = "0.0.1"
  override def createResultObject(): ModelResultBase = new MappedModelResults()
}
class Model(factory: ModelInstanceFactory) extends ModelInstance(factory) {
  val conversion = new com.ligadata.runtime.Conversion
  override def execute(txnCtxt: TransactionContext, execMsgsSet: Array[ContainerOrConcept], triggerdSetIndex: Int, outputDefault: Boolean): Array[ContainerOrConcept] = {
    val messagefactoryinterface = execMsgsSet(0).asInstanceOf[MessageFactoryInterface]
    //
    //
    def exeGenerated_test1_1(msg1: com.ligadata.kamanja.test.v1000000.varin1): Array[MessageInterface] = {
      // in scala, type could be optional
      val out3: Int = msg1.get("in3") + 1000
      def process_o1(): Array[MessageInterface] = {
        if (!(out3 != -1 && out3 < 100)) return Array.empty[MessageInterface]
        val t1: String = "s:" + msg1.get("in3").toString()
        val result = new com.ligadata.kamanja.test.v1000000.varout1(messagefactoryinterface)
        result.out1 = msg1.in1
        result.out2 = msg1.in2
        result.set("out3", t1)
        result.set("out4", msg1.get("in4"))
        Array(result)
      }
      process_o1()
    }
    // Evaluate messages
    val msgs = execMsgsSet.map(m => m.getFullTypeName -> m).toMap
    val msg1 = msgs.get("com.ligadata.kamanja.test.varin1").getOrElse(null).asInstanceOf[com.ligadata.kamanja.test.v1000000.varin1]
    // Main dependency -> execution check
    //
    val results: Array[MessageInterface] =
    if(msg1!=null) {
      exeGenerated_test1_1(msg1)
    } else {
      Array.empty[MessageInterface]
    }
    results.asInstanceOf[Array[ContainerOrConcept]]
  }
}
