1.1.x to 1.3

** If 1.3 code is being installed in the same directory as the current release,
   please make sure to backup existing installation directory
** If your database environment supports systematic backups, please backup your
   database. Note that Migration scripts create a backup for each table.
** Install existing  code.
** Run the Migrate script
   migrate <your_cluster_config.json> <your_metadataapi.properties> <old_version> <new_version> 

Implementation approach

** A bash script is used as a wrapper 
** wrapper script does validations on scala version and java versions(copy the code from existing install scripts)
** Use a text file to capture the state of migration
** Create a new scala project under Utils/Migrate, this project contains most of the relevant code.
** The scala project clones all the old storage adapters and new storage adapters
** Old adapters may require minor changes to be able to parse adapter string
** In the initial implementation, we are not adding new API's to interface definitions
** As the time permits, some of the basic operations will be made part of adapter interface.

** Algoritm(or flow)

   Create an instance of 1.3  StorageAdapter.
   if the old version is 1.1.x:
      Create an instance of 1.1.x  StorageAdapter.

   Read the status information from the "migration_status" file
   If migration_status indicates a backup is not done, continue the backup step
      Using the 1.3 adapter rename all the tables
     ( metadata_objects,jar_store,config_objects,model_config_objects,transaction_id,all_data,status_info )
      Please note that table backup may have failed in a previous attempt,
     we need not do anything if a tables is already renamed.
     (assumption, renaming table is supported as an atomic operation in respective data bases)
     Update the status that a storage backup is complete
   If Migration_status indicates that backup is complete

   Backup is successful. Migrate metadata objects
      If Migration_status indicates that metadata migration is not complete:
         Using 1.1.x adapter, read the existing metadata objects into memory from all the renamed tables
	 Load the clusterconfig.json using 1.3 adapter
         For all objects other than models/messages/containers:
	     Persist the object using 1.3 adapter (note that put operation will create the underlying table)
         For messages/containers:
             Extract the message/container definition from the object
             Execute AddMessage/AddContainer API for these objects
	 For Models:
	     List the models and notify that they require updates
	     before adding them
	 Update status that metadata migration is complete.

    Metadata Migration is complete. Migrate data
         Using 1.1.x adapter, read the existing data records one batch  at a time in a loop
               massage the data into 1.3 data structures(key value pairs)
	       Note that tablename is same as class name  for each of the messages and containers
	       Use 1.3 adapter (multi container put api) to persist the batch
	 Update status that data migration is complete.
